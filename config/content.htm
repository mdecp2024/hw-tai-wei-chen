<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>fqpabi8</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323250">hhttps://github.com/mdecp2024/41323250</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/41323250">https://mdecp2024.github.io/41323250</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h3>w10</h3>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/41323250/content/Brython.html?src=https://gist.githubusercontent.com/tai-wei-chen/5c42d188d883eb129e101f39884beb9c/raw/6a559b0d7cf789f60ed623172640fa5f296c27ff/w16">w16_exam3</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
 
 
def draw_maze(angle_degrees):
    # 創建畫布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas
 
    # 取得繪圖上下文
    ctx = canvas.getContext("2d")
 
    # 設置參數
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 50 * 2
    # 向右移動的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)
 
    # 定義迷宮線條
    lines = [
        ((0, 0), (2, 0)),
        ((3, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((1, 3), (4, 3)),
        ((3, 2), (3, 3)),
        ((1, 1), (4, 1)),
        ((4, 1), (4, 2)),
        ((2, 1), (2, 2)),
        ((2, 4), (3, 4)),
        ((2, 4), (2, 5)),
        ((1, 3), (1, 4)),
        ((0, 2), (2, 2)),
        ((0, 5), (2, 5)),
        ((0, 0), (0, 5)),
    ]
 
    # 旋轉並繪製迷宮線條
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]
 
        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
 
        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
 
        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
 
    return ctx, offset_x + move_right_offset, offset_y, pixel_scale
 
 
def find_path():
    
    path = [
        ((2.5, 0), (2.5, 0.5)),
        ((2.5, 0.5), (4.5, 0.5)),
        ((4.5, 0.5), (4.5, 2.5)),
        ((4.5, 2.5), (3.5, 2.5)),
        ((3.5, 2.5), (3.5, 1.5)),
        ((3.5, 1.5), (2.5, 1.5)),
        ((2.5, 1.5), (2.5, 2.5)),
        ((2.5, 2.5), (0.5, 2.5)),
        ((0.5, 2.5), (0.5, 4.5)),
        ((0.5, 4.5), (1.5, 4.5)),
        ((1.5, 4.5), (1.5, 3.5)),
        ((1.5, 3.5), (3.5, 3.5)),
        ((3.5, 3.5), (3.5, 4.5)),
        ((3.5, 4.5), (2.5, 4.5)),
        ((2.5, 4.5), (2.5, 5))
    ]
    return path
 
 
def draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):
    angle_radians = math.radians(angle_degrees)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    for line in path:
        start = line[0]
        end = line[1]
 
        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
 
        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
 
        ctx.beginPath()
        ctx.moveTo(
            offset_x + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
 
 
def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文字位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋轉後的文字位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 50)", 10, - 15)
    ctx.restore()
 
 
if __name__ == "__main__":
    # 調整迷宮角度，這裡設定為30度，可依需求修改
    maze_angle = 0
    # 文字角度
    text_angle = 0
    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)
    path = find_path()
    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p><img alt="" height="551" src="/images/螢幕擷取畫面 2025-01-07 013435.png" width="530"/><br/><br/></p><h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/41323250/content/Brython.html?src=https://gist.githubusercontent.com/tai-wei-chen/f398ed712ffb7fdb9a202ebb97ac2b6b/raw/e6336faf85b745f9cc2c09201bfd1f57a1e4b8b9/w16">w16_exam2</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 創建畫布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 取得繪圖上下文
    ctx = canvas.getContext("2d")

    # 設置參數
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 50 * 2
    # 向右移動的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定義迷宮線條
    lines = [
        ((0, 0), (2, 0)),
        ((3, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((1, 3), (4, 3)),
        ((3, 2), (3, 3)),
        ((1, 1), (4, 1)),
        ((4, 1), (4, 2)),
        ((2, 1), (2, 2)),
        ((2, 4), (3, 4)),
        ((2, 4), (2, 5)),
        ((1, 3), (1, 4)),
        ((0, 2), (2, 2)),
        ((0, 5), (2, 5)),
        ((0, 0), (0, 5)),
    ]

    # 旋轉並繪製迷宮線條
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文字位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋轉後的文字位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 50)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    
    maze_angle = 0
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p><img alt="" height="553" src="/images/螢幕擷取畫面 2025-01-07 013134.png" width="522"/></p><h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/41323250/content/Brython.html?src=https://gist.githubusercontent.com/tai-wei-chen/06ddf754a0815ea37cdf6b88c6ef25cb/raw/12d755a343c94f76bb5ab313ec911149a12bbb2e/w16">w16_exam1</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
  
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
  
setup_canvas()
 
# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# Set origin (32, 50)
origin_x, origin_y = 32, 50    #自己學號 
 
# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()
 
# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()
 
# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 50)", origin_x + 5, origin_y - 5)
 
# Draw shapes
# Adjusted placement to fix alignment issue
 
# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()
 
# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()
 
# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()
 
# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
 
# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()
 
# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()</pre>
<p><img alt="" height="227" src="/images/螢幕擷取畫面 2025-01-07 012532.png" width="389"/></p><h3>w15</h3><h3>w14_ex</h3>
<p><span>1211上課程式：程式</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
 
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
 
setup_canvas()
 
# 判斷點 (x, y) 是否在圓內，圓的圓心為 (cx, cy)，半徑為 r
def is_inside_circle(x, y, cx, cy, r):
    distance = math.sqrt((x - cx) ** 2 + (y - cy) ** 2)
    return distance &lt;= r
 
# 繪製圓
def draw_circle(ctx, cx, cy, r):
    ctx.beginPath()
    ctx.arc(cx, cy, r, 0, 2 * math.pi)
    ctx.stroke()
 
# 獲取 canvas 上下文
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# 用戶輸入三個圓的圓心座標和半徑
circle1_center_x = float(input("輸入第一個圓的圓心 x 座標: "))
circle1_center_y = float(input("輸入第一個圓的圓心 y 座標: "))
circle1_radius = float(input("輸入第一個圓的半徑: "))
 
circle2_center_x = float(input("輸入第二個圓的圓心 x 座標: "))
circle2_center_y = float(input("輸入第二個圓的圓心 y 座標: "))
circle2_radius = float(input("輸入第二個圓的半徑: "))
 
circle3_center_x = float(input("輸入第三個圓的圓心 x 座標: "))
circle3_center_y = float(input("輸入第三個圓的圓心 y 座標: "))
circle3_radius = float(input("輸入第三個圓的半徑: "))
 
# 繪製三個圓
draw_circle(ctx, circle1_center_x, circle1_center_y, circle1_radius)
draw_circle(ctx, circle2_center_x, circle2_center_y, circle2_radius)
draw_circle(ctx, circle3_center_x, circle3_center_y, circle3_radius)
 
# 遍歷一定範圍的點來確定所屬區域並著色
width = canvas.width
height = canvas.height
for x in range(0, width, 5):
    for y in range(0, height, 5):
        in_circle1 = is_inside_circle(x, y, circle1_center_x, circle1_center_y, circle1_radius)
        in_circle2 = is_inside_circle(x, y, circle2_center_x, circle2_center_y, circle2_radius)
        in_circle3 = is_inside_circle(x, y, circle3_center_x, circle3_center_y, circle3_radius)
 
        if in_circle1 and in_circle2 and in_circle3:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "purple"  # 三個圓重疊區域設為紫色
            ctx.fill()
        elif in_circle1 and in_circle2:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "blue"  # 僅在圓1、圓2重疊（不含圓3重疊部分）區域設為藍色
            ctx.fill()
        elif in_circle1 and in_circle3:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "green"  # 僅在圓1、圓3重疊（不含圓2重疊部分）區域設為綠色
            ctx.fill()
        elif in_circle2 and in_circle3:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "yellow"  # 僅在圓2、圓3重疊（不含圓1重疊部分）區域設為黃色
            ctx.fill()
        elif in_circle1:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "cyan"  # 僅在圓1內（不含和其他圓重疊部分）區域設為青色
            ctx.fill()
        elif in_circle2:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "magenta"  # 僅在圓2內（不含和其他圓重疊部分）區域設為品紅
            ctx.fill()
        elif in_circle3:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "orange"  # 僅在圓3內（不含和其他圓重疊部分）區域設為橙色
            ctx.fill()
        else:
            ctx.beginPath()
            ctx.arc(x, y, 2, 0, 2 * math.pi)
            ctx.fillStyle = "gray"  # 三個圓外的區域設為灰色
            ctx.fill()</pre>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#運算程式
def addto(start, end):   #定義函數addto
    sum_result = 0       #設定數值sum_result=0
    i = start            #設定i=start
    while i &lt;= end:      #設結束之值為end
        sum_result += i  
        i += 1
    return sum_result    #終止函數運行並返回數值至result
     
#調用程式
result = addto(1, 100)   #設定起始值
print(result)            #列印result</pre>
<p>範例程式<br/><br/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum_result = 0 #建立變數sum_result
i = 1 #指定i等於1
while i &lt;= 100:     #使用while迴圈把i加到等於100
    sum_result += i   
    i += 1
print(sum_result)
</pre>
<p></p><h3>w12_hw</h3>
<p><em>第一題：input()與 print()</em></p>
<p>input()範例程式：<span style="background-color: #ffffff; color: #0000ff;">嚴家明</span></p>
<p>    說明：input為輸入()中為問題,使用者輸入之答案會變成返回的值</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("嚴家明")</pre>
<div>
<p>print()範例程式：cat</p>
<p><span>    說明：</span>print是打印的指令,如果用以下的執行出來會出現一隻小貓(Bython執行會歪掉,所以有補償空格)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")
</pre>
<p><em>第二題：變數</em></p>
<p>Q2-1範例程式：</p>
<p>    說明：設定變數後,可以使用列印指令,列印出不同變數</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "chou" #變數first_name為"自己的姓"
last_name  = "ryan" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p>Q2-2範例程式：name+food</p>
<p><span>    說明：使用input指令跳出詢問窗,再</span><span>使用回傳的數值與字串進行合併</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?") #變數name為input所輸入之文字
favorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字
print ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)
print ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)
print (name + "'s favorite food is " + favorite_food) #列印name (數值)+ 's favorite food is (此段為文字)+favorite_food(數值)</pre>
<p><em>第三題：if判斷式</em></p>
<p><span>Q3範例程式：書店</span></p>
<p><span>    說明：使用if判斷式判斷使用者輸入之數值(文字)是否在字串當中</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串
print (programming_books) #列印programming_books變數(會出現三個字串)
wanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值
print (wanted_book) #列印wanted_book變數
if wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中
    print ("Yes, we sell it!")       #列印 是的我們有販賣
else:                            #反之    
    print ("Sorry, we don't sell that book") #列印 抱歉我們沒有販賣</pre>
<p><span><em>第四題：append()和remove()</em></span></p>
<p><span>Q4範例程式：shop</span><br/><span></span></p>
<p><span>    說明：使用append()進行加入接著使用remove()移除清單內無需購買之物品</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值
 
if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)
 
if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p><em>第五題：index().pop()和insert()</em></p>
<p><span>    說明：index()用於從列表中找出某個述職的位置</span></p>
<p><span>             pop()用於將列標表中的元素移除(默認為最後一個)</span></p>
<p><span>             insert用於將字串插入</span></p>
<p><span>Q5範例程式：菜單</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<p><em>第六題：切片取值</em></p>
<p><span>    說明：</span><span>[star:end:step][起點:終點:步長]</span></p>
<p><span>Q6範例程式：城市</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #變數城市=以下字串
print (cities) #列印 (城市)
print (cities[1]) #列印 (城市 [1])    由於程式是由0開始計算 所以第一個會是Prague
print (cities[1:4]) #列印 (城市 [1:4]) 列印出來會是['Prague', 'Cape Town', 'Tokyo'] 由於執行到4就停止了所以只有三個
print (cities[1:4:2]) #列印 城市 [1:4:2]) 列印出來會是['Prague', 'Tokyo'] 因為步數設定為2 程式執行會把1~4由左至右一次跳過兩個進行輸出
print (cities[0:3]) #列印 城市 [0:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 這次是從0開始計算
print (cities[:3]) #列印 城市 [:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 由於未輸入數值,默認為0
print (cities[2:5]) #列印 城市 [2:5]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 從2~5
print (cities[2:]) #列印 城市 [2:]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 如果結束未輸入默認為列表的長度之值
print (cities[0:5:2]) #列印 城市 [0:5:2]) 列印出來會是['San Diego', 'Cape Town', 'Melbourne'] 程式執行會把0~5由左至右一次跳過兩個進行輸出
print (cities[::2]) #列印 城市 [::2]) 列印出來會是 ['San Diego', 'Cape Town', 'Melbourne'] 未輸入開始會默認0終點會默認列表的長度
print (cities[4]) #列印 城市 [4]) 列印出來會是 Melbourne 
print (cities[-1]) #列印 城市 [-1]) 列印出來會是 Melbourne -值會倒退計算 "含前不含後"
print (cities[-4:-1]) #列印 城市 [-4:-1]) 列印出來會是 ['Prague', 'Cape Town', 'Tokyo']
cities[3:0:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
cities[-2:-5:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
print (cities[::-1]) #列印 城市 [::-1]) ['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Diego']</pre>
<p></p>
</div><h3>w13_hw</h3>
<p>12/4</p>
<p>1</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400,height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# 每一格的 pixel 數
gs = 200
 
# gs*tc = canvas width and height
 
ctx = canvas.getContext("2d")
 
width=1
height=1
 
for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs,j*gs,gs,gs)
     ctx.stroke();</pre>
<p>2</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400,height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 200

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

width=1
height=1

for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs,j*gs,gs,gs)
     ctx.stroke();
     
for i in range(width): 
    for j in range(height):
     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
     ctx.lineWidth=1
     ctx.strokeStyle='red'
     ctx.beginPath();
     ctx.rect(i*gs+50,j*gs+50,gs,gs)
     ctx.stroke();</pre>
<p>3</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document as doc, window
 
# Create canvas element
canvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
# Get the drawing context of the canvas
ctx = canvas.getContext("2d")
 
# Draw the first empty square at (0, 0)
width = 10
height = 10
gs = 20  # Grid size (for spacing)
 
ctx.lineWidth = 2
ctx.strokeStyle = 'red'  # Color for the first square
ctx.beginPath()
ctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)
ctx.stroke()
 
# Draw the second empty square at (100, 100)
offset_x = 150  # Change the x-coordinate to give more space
offset_y = 150  # Change the y-coordinate to give more space
width2 = 10
height2 = 10
 
ctx.lineWidth = 2
ctx.strokeStyle = 'red'  # Color for the second square
ctx.beginPath()
ctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square
ctx.stroke()
 
# Function to draw a circle around a square
def draw_outer_circle(x, y, width, height):
    # Calculate the radius of the outer circle (half of the diagonal of the square)
    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2
    # Calculate the center of the square
    center_x = x + width * gs / 2
    center_y = y + height * gs / 2
    # Draw the outer circle
    ctx.beginPath()
    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)
    ctx.strokeStyle = 'black'  # Color for the outer circle
    ctx.lineWidth = 2
    ctx.stroke()
 
# Draw outer circles around both squares
draw_outer_circle(50, 50, width, height)  # For the first square
draw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square
 
# Create the context menu
context_menu = html.DIV(style={"position": "absolute", "display": "none", "background-color": "#fff", "border": "1px solid #ccc", "padding": "5px"})
context_menu &lt;= html.BUTTON("Option 1: Clear Canvas")
context_menu &lt;= html.BUTTON("Option 2: Draw Circle")
brython_div &lt;= context_menu
 
# Function to show context menu
def show_context_menu(event):
    event.preventDefault()  # Prevent the default right-click menu
    context_menu.style.display = "block"  # Show custom context menu
    context_menu.style.left = f"{event.pageX}px"  # Set the position of the menu
    context_menu.style.top = f"{event.pageY}px"
 
# Hide the context menu when clicking elsewhere
def hide_context_menu(event):
    context_menu.style.display = "none"
 
# Attach right-click (contextmenu) event to the canvas
canvas.bind("contextmenu", show_context_menu)
 
# Attach click event to document to hide the menu when clicking elsewhere
document.bind("click", hide_context_menu)
 
# Function for the menu options
def clear_canvas(event):
    ctx.clearRect(0, 0, canvas.width, canvas.height)  # Clear the canvas
    context_menu.style.display = "none"  # Hide the context menu after action
 
def draw_circle(event):
    ctx.beginPath()
    ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # Draw a circle at the center
    ctx.strokeStyle = 'green'
    ctx.stroke()
    context_menu.style.display = "none"  # Hide the context menu after action
 
# Attach actions to context menu buttons
context_menu.children[0].bind("click", clear_canvas)  # First button: Clear canvas
context_menu.children[1].bind("click", draw_circle)  # Second button: Draw a circle</pre>
<p></p><h3>w11_hw</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11
space = '_'
center = n//2

for y in range(n):
    for x in range(n):
        print("(",x, ", ", y, ")",sep="")</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
gs = 20
 
# gs*tc = canvas width and height
 
ctx = canvas.getContext("2d")
 
width = 11
height = 11
 
'''
ctx.lineWidth = 1
ctx.strokeStyle = 'lightgrey'
ctx.beginPath()
# ctx.rect(i*gs, j*gs, gs,gs)
ctx.rect(0, 0, 150, 100)
ctx.stroke()
'''
 
for i in range(width):
    for j in range(height):
        ctx.lineWidth = 1
        ctx.strokeStyle = 'lightgrey'
        ctx.beginPath() 
        ctx.rect(i * gs, j * gs, gs, gs)
        ctx.stroke() </pre>
<p><br/><br/><br/><br/></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p>10/9</p>
<p><span class="hljs-keyword">     def</span> <span class="hljs-title function_">print_pyramid</span>(<span class="hljs-params">height</span>):</p>
<p><span class="hljs-keyword">            for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):</p>
<p><span class="hljs-comment">            # 打印空格</span></p>
<p><span class="hljs-built_in">            print</span>(<span class="hljs-string">' '</span> * (height - i - <span class="hljs-number">1</span>), end=<span class="hljs-string">''</span>)</p>
<p><span class="hljs-comment">           # 打印星號</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">'*'</span> * (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>))</p>
<h4><span class="hljs-comment">            設定金字塔的高度</span> height = <span class="hljs-number">5</span> </h4>
<h4>             print_pyramid(height)</h4>
<p>執行後的結果會是：</p>
<p><span class="hljs-bullet">    *</span></p>
<p><span class="hljs-strong">   *** </span></p>
<p><span class="hljs-strong">  **</span><span class="hljs-strong">*** </span></p>
<p><span class="hljs-strong"> **</span><span class="hljs-strong">****</span>*</p>
<p><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</p>
<p>這是我在這次上課學到的東西。</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><br/><img alt="" height="450" src="/images/螢幕擷取畫面 2024-10-16 114539.png" width="800"/>w8</p>
<p>這堂課的程式很有邏輯排列清晰</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>