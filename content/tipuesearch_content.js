var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:\xa0 fqpabi8 \n 個人倉儲: hhttps://github.com/mdecp2024/41323250 \n 個人網站: https://mdecp2024.github.io/41323250 \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'w10', 'text': '', 'tags': '', 'url': 'w10.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w16_exam3', 'text': 'w16_exam3 \n from browser import html\nfrom browser import document as doc\nimport math\n \n \ndef draw_maze(angle_degrees):\n    # 創建畫布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n \n    # 取得繪圖上下文\n    ctx = canvas.getContext("2d")\n \n    # 設置參數\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 50 * 2\n    # 向右移動的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n \n    # 定義迷宮線條\n    lines = [\n        ((0, 0), (2, 0)),\n        ((3, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((1, 3), (4, 3)),\n        ((3, 2), (3, 3)),\n        ((1, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n        ((2, 1), (2, 2)),\n        ((2, 4), (3, 4)),\n        ((2, 4), (2, 5)),\n        ((1, 3), (1, 4)),\n        ((0, 2), (2, 2)),\n        ((0, 5), (2, 5)),\n        ((0, 0), (0, 5)),\n    ]\n \n    # 旋轉並繪製迷宮線條\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n \n        # 旋轉起點座標\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        # 旋轉終點座標\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n \n    return ctx, offset_x + move_right_offset, offset_y, pixel_scale\n \n \ndef find_path():\n    \n    path = [\n        ((2.5, 0), (2.5, 0.5)),\n        ((2.5, 0.5), (4.5, 0.5)),\n        ((4.5, 0.5), (4.5, 2.5)),\n        ((4.5, 2.5), (3.5, 2.5)),\n        ((3.5, 2.5), (3.5, 1.5)),\n        ((3.5, 1.5), (2.5, 1.5)),\n        ((2.5, 1.5), (2.5, 2.5)),\n        ((2.5, 2.5), (0.5, 2.5)),\n        ((0.5, 2.5), (0.5, 4.5)),\n        ((0.5, 4.5), (1.5, 4.5)),\n        ((1.5, 4.5), (1.5, 3.5)),\n        ((1.5, 3.5), (3.5, 3.5)),\n        ((3.5, 3.5), (3.5, 4.5)),\n        ((3.5, 4.5), (2.5, 4.5)),\n        ((2.5, 4.5), (2.5, 5))\n    ]\n    return path\n \n \ndef draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):\n    angle_radians = math.radians(angle_degrees)\n    ctx.strokeStyle = "red"\n    ctx.lineWidth = 2\n    for line in path:\n        start = line[0]\n        end = line[1]\n \n        # 旋轉起點座標\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        # 旋轉終點座標\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n \n \ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文字位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋轉後的文字位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 50)", 10, - 15)\n    ctx.restore()\n \n \nif __name__ == "__main__":\n    # 調整迷宮角度，這裡設定為30度，可依需求修改\n    maze_angle = 0\n    # 文字角度\n    text_angle = 0\n    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)\n    path = find_path()\n    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'w16_exam2', 'text': 'w16_exam2 \n from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 創建畫布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 取得繪圖上下文\n    ctx = canvas.getContext("2d")\n\n    # 設置參數\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 50 * 2\n    # 向右移動的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定義迷宮線條\n    lines = [\n        ((0, 0), (2, 0)),\n        ((3, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((1, 3), (4, 3)),\n        ((3, 2), (3, 3)),\n        ((1, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n        ((2, 1), (2, 2)),\n        ((2, 4), (3, 4)),\n        ((2, 4), (2, 5)),\n        ((1, 3), (1, 4)),\n        ((0, 2), (2, 2)),\n        ((0, 5), (2, 5)),\n        ((0, 0), (0, 5)),\n    ]\n\n    # 旋轉並繪製迷宮線條\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋轉起點座標\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋轉終點座標\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文字位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋轉後的文字位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 50)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    \n    maze_angle = 0\n    text_angle = 0\n    ctx, offset_x, offset_y = draw_maze(maze_angle)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'w16_exam1', 'text': 'w16_exam1 \n \n from browser import document, html\nimport math\n  \n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n  \nsetup_canvas()\n \n# Set up canvas\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n \n# Set origin (32, 50)\norigin_x, origin_y = 32, 50    #自己學號 \n \n# Draw X-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(500, origin_y)\nctx.strokeStyle = "black"\nctx.lineWidth = 2\nctx.stroke()\n \n# Draw Y-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(origin_x, 300)\nctx.stroke()\n \n# Label origin\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(32, 50)", origin_x + 5, origin_y - 5)\n \n# Draw shapes\n# Adjusted placement to fix alignment issue\n \n# Hexagon (Orange)\nhex_x, hex_y = 100, 100\nctx.beginPath()\nfor i in range(6):\n    angle = i * (2 * math.pi / 6)\n    x = hex_x + 30 * math.cos(angle)\n    y = hex_y + 30 * math.sin(angle)\n    if i == 0:\n        ctx.moveTo(x, y)\n    else:\n        ctx.lineTo(x, y)\nctx.closePath()\nctx.fillStyle = "orange"\nctx.fill()\n \n# Diamond (Teal)\nctx.beginPath()\nctx.moveTo(160, 70)\nctx.lineTo(180, 100)\nctx.lineTo(160, 130)\nctx.lineTo(140, 100)\nctx.closePath()\nctx.fillStyle = "teal"\nctx.fill()\n \n# Triangle (Teal)\nctx.beginPath()\nctx.moveTo(165, 130)\nctx.lineTo(205, 130)\nctx.lineTo(185, 100)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n \n# Circle (Pink)\nctx.beginPath()\nctx.arc(230, 100, 30, 0, 2 * math.pi)\nctx.fillStyle = "pink"\nctx.fill()\n \n# Square (Yellow)\nctx.beginPath()\nctx.rect(265, 75, 50, 50)\nctx.fillStyle = "yellow"\nctx.fill()\n \n# Rectangle (Blue)\nctx.beginPath()\nctx.rect(320, 90, 60, 20)\nctx.fillStyle = "Blue"\nctx.fill() \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'w15', 'text': '', 'tags': '', 'url': 'w15.html'}, {'title': 'w14_ex', 'text': '1211上課程式：程式 \n from browser import document, html\nimport math\n \n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n \nsetup_canvas()\n \n# 判斷點 (x, y) 是否在圓內，圓的圓心為 (cx, cy)，半徑為 r\ndef is_inside_circle(x, y, cx, cy, r):\n    distance = math.sqrt((x - cx) ** 2 + (y - cy) ** 2)\n    return distance <= r\n \n# 繪製圓\ndef draw_circle(ctx, cx, cy, r):\n    ctx.beginPath()\n    ctx.arc(cx, cy, r, 0, 2 * math.pi)\n    ctx.stroke()\n \n# 獲取 canvas 上下文\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n \n# 用戶輸入三個圓的圓心座標和半徑\ncircle1_center_x = float(input("輸入第一個圓的圓心 x 座標: "))\ncircle1_center_y = float(input("輸入第一個圓的圓心 y 座標: "))\ncircle1_radius = float(input("輸入第一個圓的半徑: "))\n \ncircle2_center_x = float(input("輸入第二個圓的圓心 x 座標: "))\ncircle2_center_y = float(input("輸入第二個圓的圓心 y 座標: "))\ncircle2_radius = float(input("輸入第二個圓的半徑: "))\n \ncircle3_center_x = float(input("輸入第三個圓的圓心 x 座標: "))\ncircle3_center_y = float(input("輸入第三個圓的圓心 y 座標: "))\ncircle3_radius = float(input("輸入第三個圓的半徑: "))\n \n# 繪製三個圓\ndraw_circle(ctx, circle1_center_x, circle1_center_y, circle1_radius)\ndraw_circle(ctx, circle2_center_x, circle2_center_y, circle2_radius)\ndraw_circle(ctx, circle3_center_x, circle3_center_y, circle3_radius)\n \n# 遍歷一定範圍的點來確定所屬區域並著色\nwidth = canvas.width\nheight = canvas.height\nfor x in range(0, width, 5):\n    for y in range(0, height, 5):\n        in_circle1 = is_inside_circle(x, y, circle1_center_x, circle1_center_y, circle1_radius)\n        in_circle2 = is_inside_circle(x, y, circle2_center_x, circle2_center_y, circle2_radius)\n        in_circle3 = is_inside_circle(x, y, circle3_center_x, circle3_center_y, circle3_radius)\n \n        if in_circle1 and in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "purple"  # 三個圓重疊區域設為紫色\n            ctx.fill()\n        elif in_circle1 and in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "blue"  # 僅在圓1、圓2重疊（不含圓3重疊部分）區域設為藍色\n            ctx.fill()\n        elif in_circle1 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "green"  # 僅在圓1、圓3重疊（不含圓2重疊部分）區域設為綠色\n            ctx.fill()\n        elif in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "yellow"  # 僅在圓2、圓3重疊（不含圓1重疊部分）區域設為黃色\n            ctx.fill()\n        elif in_circle1:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "cyan"  # 僅在圓1內（不含和其他圓重疊部分）區域設為青色\n            ctx.fill()\n        elif in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "magenta"  # 僅在圓2內（不含和其他圓重疊部分）區域設為品紅\n            ctx.fill()\n        elif in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "orange"  # 僅在圓3內（不含和其他圓重疊部分）區域設為橙色\n            ctx.fill()\n        else:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "gray"  # 三個圓外的區域設為灰色\n            ctx.fill() \n \n \n #運算程式\ndef addto(start, end):   #定義函數addto\n    sum_result = 0       #設定數值sum_result=0\n    i = start            #設定i=start\n    while i <= end:      #設結束之值為end\n        sum_result += i  \n        i += 1\n    return sum_result    #終止函數運行並返回數值至result\n     \n#調用程式\nresult = addto(1, 100)   #設定起始值\nprint(result)            #列印result \n 範例程式 \n sum_result = 0 #建立變數sum_result\ni = 1 #指定i等於1\nwhile i <= 100:     #使用while迴圈把i加到等於100\n    sum_result += i   \n    i += 1\nprint(sum_result)\n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w12_hw', 'text': '第一題：input()與 print() \n input()範例程式： 嚴家明 \n \xa0 \xa0 說明：input為輸入()中為問題,使用者輸入之答案會變成返回的值 \n input("嚴家明") \n \n print()範例程式：cat \n \xa0 \xa0 說明： print是打印的指令,如果用以下的執行出來會出現一隻小貓(Bython執行會歪掉,所以有補償空格) \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___")\n \n 第二題：變數 \n Q2-1範例程式： \n \xa0 \xa0 說明：設定變數後,可以使用列印指令,列印出不同變數 \n first_name = "chou" #變數first_name為"自己的姓"\nlast_name  = "ryan" #變數last_name為"自己的名"\nprint (first_name) #列印變數first_name\nprint (last_name) #列印變數last_name \n Q2-2範例程式：name+food \n \xa0 \xa0 說明：使用input指令跳出詢問窗,再 使用回傳的數值與字串進行合併 \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值) \n 第三題：if判斷式 \n Q3範例程式：書店 \n \xa0 \xa0 說明：使用if判斷式判斷使用者輸入之數值(文字)是否在字串當中 \n programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串\nprint (programming_books) #列印programming_books變數(會出現三個字串)\nwanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值\nprint (wanted_book) #列印wanted_book變數\nif wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中\n    print ("Yes, we sell it!")       #列印 是的我們有販賣\nelse:                            #反之    \n    print ("Sorry, we don\'t sell that book") #列印 抱歉我們沒有販賣 \n 第四題：append()和remove() \n Q4範例程式：shop \n \xa0 \xa0 說明：使用append()進行加入接著使用remove()移除清單內無需購買之物品 \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n \nif new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n    print (shopping_list) #列印shopping_list字串\nelse:                    #反之\n    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單\n    print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n \nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n    print (shopping_list) #列印購物清單\nelse:                     #反之\n    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n    print (shopping_list) #列印購物清單 \n 第五題：index().pop()和insert() \n \xa0 \xa0 說明：index()用於從列表中找出某個述職的位置 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0pop()用於將列標表中的元素移除(默認為最後一個) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0insert用於將字串插入 \n Q5範例程式：菜單 \n todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"\nside_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index) #列印side_dish_index  列印他在第幾位\ntodays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條\nprint (todays_menu) #列印今日菜單 \n 第六題：切片取值 \n \xa0 \xa0 說明： [star:end:step][起點:終點:步長] \n Q6範例程式：城市 \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #變數城市=以下字串\nprint (cities) #列印 (城市)\nprint (cities[1]) #列印 (城市 [1])    由於程式是由0開始計算 所以第一個會是Prague\nprint (cities[1:4]) #列印 (城市 [1:4]) 列印出來會是[\'Prague\', \'Cape Town\', \'Tokyo\'] 由於執行到4就停止了所以只有三個\nprint (cities[1:4:2]) #列印 城市 [1:4:2]) 列印出來會是[\'Prague\', \'Tokyo\'] 因為步數設定為2 程式執行會把1~4由左至右一次跳過兩個進行輸出\nprint (cities[0:3]) #列印 城市 [0:3]) 列印出來會是[\'San Diego\', \'Prague\', \'Cape Town\'] 這次是從0開始計算\nprint (cities[:3]) #列印 城市 [:3]) 列印出來會是[\'San Diego\', \'Prague\', \'Cape Town\'] 由於未輸入數值,默認為0\nprint (cities[2:5]) #列印 城市 [2:5]) 列印出來會是 [\'Cape Town\', \'Tokyo\', \'Melbourne\'] 從2~5\nprint (cities[2:]) #列印 城市 [2:]) 列印出來會是 [\'Cape Town\', \'Tokyo\', \'Melbourne\'] 如果結束未輸入默認為列表的長度之值\nprint (cities[0:5:2]) #列印 城市 [0:5:2]) 列印出來會是[\'San Diego\', \'Cape Town\', \'Melbourne\'] 程式執行會把0~5由左至右一次跳過兩個進行輸出\nprint (cities[::2]) #列印 城市 [::2]) 列印出來會是 [\'San Diego\', \'Cape Town\', \'Melbourne\'] 未輸入開始會默認0終點會默認列表的長度\nprint (cities[4]) #列印 城市 [4]) 列印出來會是 Melbourne \nprint (cities[-1]) #列印 城市 [-1]) 列印出來會是 Melbourne -值會倒退計算 "含前不含後"\nprint (cities[-4:-1]) #列印 城市 [-4:-1]) 列印出來會是 [\'Prague\', \'Cape Town\', \'Tokyo\']\ncities[3:0:-1] #這個是切片操作 如果列印出來會是 [\'Tokyo\', \'Cape Town\', \'Prague\']\ncities[-2:-5:-1] #這個是切片操作 如果列印出來會是 [\'Tokyo\', \'Cape Town\', \'Prague\']\nprint (cities[::-1]) #列印 城市 [::-1]) [\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Diego\'] \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '12/4 \n 1 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n# 每一格的 pixel 數\ngs = 200\n \n# gs*tc = canvas width and height\n \nctx = canvas.getContext("2d")\n \nwidth=1\nheight=1\n \nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke(); \n 2 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 200\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth=1\nheight=1\n\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n     \nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs+50,j*gs+50,gs,gs)\n     ctx.stroke(); \n 3 \n from browser import html, document as doc, window\n \n# Create canvas element\ncanvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n# Get the drawing context of the canvas\nctx = canvas.getContext("2d")\n \n# Draw the first empty square at (0, 0)\nwidth = 10\nheight = 10\ngs = 20  # Grid size (for spacing)\n \nctx.lineWidth = 2\nctx.strokeStyle = \'red\'  # Color for the first square\nctx.beginPath()\nctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)\nctx.stroke()\n \n# Draw the second empty square at (100, 100)\noffset_x = 150  # Change the x-coordinate to give more space\noffset_y = 150  # Change the y-coordinate to give more space\nwidth2 = 10\nheight2 = 10\n \nctx.lineWidth = 2\nctx.strokeStyle = \'red\'  # Color for the second square\nctx.beginPath()\nctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square\nctx.stroke()\n \n# Function to draw a circle around a square\ndef draw_outer_circle(x, y, width, height):\n    # Calculate the radius of the outer circle (half of the diagonal of the square)\n    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2\n    # Calculate the center of the square\n    center_x = x + width * gs / 2\n    center_y = y + height * gs / 2\n    # Draw the outer circle\n    ctx.beginPath()\n    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)\n    ctx.strokeStyle = \'black\'  # Color for the outer circle\n    ctx.lineWidth = 2\n    ctx.stroke()\n \n# Draw outer circles around both squares\ndraw_outer_circle(50, 50, width, height)  # For the first square\ndraw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square\n \n# Create the context menu\ncontext_menu = html.DIV(style={"position": "absolute", "display": "none", "background-color": "#fff", "border": "1px solid #ccc", "padding": "5px"})\ncontext_menu <= html.BUTTON("Option 1: Clear Canvas")\ncontext_menu <= html.BUTTON("Option 2: Draw Circle")\nbrython_div <= context_menu\n \n# Function to show context menu\ndef show_context_menu(event):\n    event.preventDefault()  # Prevent the default right-click menu\n    context_menu.style.display = "block"  # Show custom context menu\n    context_menu.style.left = f"{event.pageX}px"  # Set the position of the menu\n    context_menu.style.top = f"{event.pageY}px"\n \n# Hide the context menu when clicking elsewhere\ndef hide_context_menu(event):\n    context_menu.style.display = "none"\n \n# Attach right-click (contextmenu) event to the canvas\ncanvas.bind("contextmenu", show_context_menu)\n \n# Attach click event to document to hide the menu when clicking elsewhere\ndocument.bind("click", hide_context_menu)\n \n# Function for the menu options\ndef clear_canvas(event):\n    ctx.clearRect(0, 0, canvas.width, canvas.height)  # Clear the canvas\n    context_menu.style.display = "none"  # Hide the context menu after action\n \ndef draw_circle(event):\n    ctx.beginPath()\n    ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # Draw a circle at the center\n    ctx.strokeStyle = \'green\'\n    ctx.stroke()\n    context_menu.style.display = "none"  # Hide the context menu after action\n \n# Attach actions to context menu buttons\ncontext_menu.children[0].bind("click", clear_canvas)  # First button: Clear canvas\ncontext_menu.children[1].bind("click", draw_circle)  # Second button: Draw a circle \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w11_hw', 'text': 'n = 11\nspace = \'_\'\ncenter = n//2\n\nfor y in range(n):\n    for x in range(n):\n        print("(",x, ", ", y, ")",sep="") \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \ngs = 20\n \n# gs*tc = canvas width and height\n \nctx = canvas.getContext("2d")\n \nwidth = 11\nheight = 11\n \n\'\'\'\nctx.lineWidth = 1\nctx.strokeStyle = \'lightgrey\'\nctx.beginPath()\n# ctx.rect(i*gs, j*gs, gs,gs)\nctx.rect(0, 0, 150, 100)\nctx.stroke()\n\'\'\'\n \nfor i in range(width):\n    for j in range(height):\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \'lightgrey\'\n        ctx.beginPath() \n        ctx.rect(i * gs, j * gs, gs, gs)\n        ctx.stroke()  \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': "主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n \n 10/9 \n \xa0 \xa0 \xa0def   print_pyramid ( height ): \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 for  i  in   range (height): \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 # 打印空格 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 print ( ' '  * (height - i -  1 ), end= '' ) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0# 打印星號   print ( '*'  * ( 2  * i +  1 )) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 設定金字塔的高度  height =  5 \xa0 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0print_pyramid(height) \n 執行後的結果會是： \n \xa0 \xa0 * \n \xa0 \xa0***  \n \xa0 ** ***  \n \xa0** **** * \n **** **** * \n 這是我在這次上課學到的東西。 \n", 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n w8 \n 這堂課的程式很有邏輯排列清晰 \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};